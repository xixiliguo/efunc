// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || amd64p32 || arm || arm64 || mips64le || mips64p32le || mipsle || ppc64le || riscv64
// +build 386 amd64 amd64p32 arm arm64 mips64le mips64p32le mipsle ppc64le riscv64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type funcgraphCallEvent struct {
	Type      uint8
	_         [7]byte
	Task      uint64
	Pid       uint32
	Tid       uint32
	GroupComm [16]uint8
	Comm      [16]uint8
	Ips       [32]uint64
	Durations [32]uint64
	Kstack    [128]uint64
	KstackSz  uint64
	StartTime uint64
	EndTime   uint64
	Depth     uint64
	NextSeqId uint64
}

type funcgraphFunc struct {
	Id          uint32
	IsMainEntry bool
	Name        [40]uint8
	TraceCnt    uint8
	_           [2]byte
	Trace       [5]funcgraphTraceData
	RetTraceCnt uint8
	_           [7]byte
	RetTrace    [5]funcgraphTraceData
}

type funcgraphFuncEntryEvent struct {
	Type     uint8
	_        [7]byte
	Task     uint64
	CpuId    uint32
	_        [4]byte
	Depth    uint64
	SeqId    uint64
	Ip       uint64
	Id       uint32
	_        [4]byte
	Time     uint64
	Para     [5]uint64
	HaveData bool
	Buf      [0]uint8
	_        [7]byte
}

type funcgraphFuncRetEvent struct {
	Type     uint8
	_        [7]byte
	Task     uint64
	CpuId    uint32
	_        [4]byte
	Depth    uint64
	SeqId    uint64
	Ip       uint64
	Id       uint32
	_        [4]byte
	Time     uint64
	Duration uint64
	Ret      uint64
	HaveData bool
	Buf      [0]uint8
	_        [7]byte
}

type funcgraphStartEvent struct {
	Type uint8
	_    [7]byte
	Task uint64
}

type funcgraphTraceData struct {
	BaseAddr    bool
	Para        uint8
	_           [6]byte
	Base        uint64
	Index       uint64
	Scale       uint64
	Imm         uint64
	IsStr       bool
	FieldCnt    uint8
	_           [2]byte
	Offsets     [20]uint32
	Size        uint16
	IsSign      bool
	CmpOperator uint8
	Target      uint64
	S_target    int64
	BitOff      uint32
	BitSize     uint32
}

// loadFuncgraph returns the embedded CollectionSpec for funcgraph.
func loadFuncgraph() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_FuncgraphBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load funcgraph: %w", err)
	}

	return spec, err
}

// loadFuncgraphObjects loads funcgraph and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*funcgraphObjects
//	*funcgraphPrograms
//	*funcgraphMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadFuncgraphObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadFuncgraph()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// funcgraphSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type funcgraphSpecs struct {
	funcgraphProgramSpecs
	funcgraphMapSpecs
}

// funcgraphSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type funcgraphProgramSpecs struct {
	Funcentry *ebpf.ProgramSpec `ebpf:"funcentry"`
	Funcret   *ebpf.ProgramSpec `ebpf:"funcret"`
}

// funcgraphMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type funcgraphMapSpecs struct {
	CallEvents  *ebpf.MapSpec `ebpf:"call_events"`
	CommsFilter *ebpf.MapSpec `ebpf:"comms_filter"`
	EventStats  *ebpf.MapSpec `ebpf:"event_stats"`
	Events      *ebpf.MapSpec `ebpf:"events"`
	FuncInfo    *ebpf.MapSpec `ebpf:"func_info"`
	PidsFilter  *ebpf.MapSpec `ebpf:"pids_filter"`
	Ready       *ebpf.MapSpec `ebpf:"ready"`
}

// funcgraphObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadFuncgraphObjects or ebpf.CollectionSpec.LoadAndAssign.
type funcgraphObjects struct {
	funcgraphPrograms
	funcgraphMaps
}

func (o *funcgraphObjects) Close() error {
	return _FuncgraphClose(
		&o.funcgraphPrograms,
		&o.funcgraphMaps,
	)
}

// funcgraphMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadFuncgraphObjects or ebpf.CollectionSpec.LoadAndAssign.
type funcgraphMaps struct {
	CallEvents  *ebpf.Map `ebpf:"call_events"`
	CommsFilter *ebpf.Map `ebpf:"comms_filter"`
	EventStats  *ebpf.Map `ebpf:"event_stats"`
	Events      *ebpf.Map `ebpf:"events"`
	FuncInfo    *ebpf.Map `ebpf:"func_info"`
	PidsFilter  *ebpf.Map `ebpf:"pids_filter"`
	Ready       *ebpf.Map `ebpf:"ready"`
}

func (m *funcgraphMaps) Close() error {
	return _FuncgraphClose(
		m.CallEvents,
		m.CommsFilter,
		m.EventStats,
		m.Events,
		m.FuncInfo,
		m.PidsFilter,
		m.Ready,
	)
}

// funcgraphPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadFuncgraphObjects or ebpf.CollectionSpec.LoadAndAssign.
type funcgraphPrograms struct {
	Funcentry *ebpf.Program `ebpf:"funcentry"`
	Funcret   *ebpf.Program `ebpf:"funcret"`
}

func (p *funcgraphPrograms) Close() error {
	return _FuncgraphClose(
		p.Funcentry,
		p.Funcret,
	)
}

func _FuncgraphClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed funcgraph_bpfel.o
var _FuncgraphBytes []byte
